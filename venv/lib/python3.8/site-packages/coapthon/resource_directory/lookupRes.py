from coapthon.resources.resource import Resource
from .databaseManager import DatabaseManager
from coapthon import defines
import rdIroha
from coapthon.client.helperclient import HelperClient
import SemanticOperations

__author__ = 'Carmelo Aparo'


class LookupRes(Resource):
    """
    Implementation of the resource lookup resource.
    """
    def __init__(self, name="rd-lookup/res", database=defines.MONGO_DATABASE, isDRD = False, DRD_ports=[], Fuseki_port = '3030'):
        """
        Initialize a resource for resource lookup.
        :param name: the name of the resource.
        """
        super(LookupRes, self).__init__(name, coap_server=None, visible=True, observable=False)
        self.resource_type = "core.rd-lookup-res"
        self.content_type = "application/link-format"
        self.database = database
        self.isDRD = isDRD
        self.DRD_ports = DRD_ports
        self.Fuseki_port = Fuseki_port

    def render_GET_advanced(self, request, response):
        """
        Method GET to search resource links.
        :param request: the request of the GET message.
        :param response: the response to the GET request.
        :return: the response to the GET request.
        """
        if (request.accept != defines.Content_types["application/link-format"]) and (request.accept is not None):
            response.code = defines.Codes.NOT_ACCEPTABLE.number
            return self, response

        db = DatabaseManager(database=self.database)
        uri_query_variables = db.parse_uri_query(request.uri_query)
        if "slave" in uri_query_variables.keys():
            slave = uri_query_variables['slave']
            print("slave" + str(slave))
        else:
            slave = None
        if(self.isDRD and slave != 1):
            for port in self.DRD_ports:
                host = "127.0.0.1"
                client = HelperClient(server=(host, port))
                path = 'rd-lookup/res?if=sensor&slave=1'
                res = client.get(path)
                # todo aggregate responses
                print("resend to "+str(port))
                if(res):
                    print(res.pretty_print())
                client.stop()

        account_name = 'admin@test'
        rd_iroha = rdIroha.RdIroha(account_name)
        rd_iroha.getResourceFromAccountDetail('Resource')

        # result = db.search(request.uri_query, "res")
        result = "rd/46"
        semchain = SemanticOperations.SemanticOperations(rdf_database='drd' + self.Fuseki_port[-1],server_port=self.Fuseki_port)
        sem_result = semchain.queryData()
        print(sem_result)
        # result = db.serialize_core_link_format(result, 'ep')
        # print(result)
        if type(result) is int:
            response.code = result
        else:
            response.code = defines.Codes.CONTENT.number
            response.payload = result
            response.content_type = defines.Content_types["application/link-format"]
        return self, response
